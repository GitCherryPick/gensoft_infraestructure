name: CI - GitCherryPick

on:
  push:
    branches: [main, 'sprint/**']
  pull_request:
    branches: [main, 'sprint/**']
jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create .env with secrets
      run: |
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
        echo "USER_DB_HOST=${{secrets.USER_DB_HOST }}" >> .env
        echo "USER_DB_NAME=${{ secrets.USER_DB_NAME }}" >> .env
        echo "USER_DB_NAME_TEST=${{ secrets.USER_DB_NAME_TEST }}" >> .env
        echo "USER_DB_USER=${{ secrets.USER_DB_USER }}" >> .env
        echo "USER_DB_PASSWORD=${{ secrets.USER_DB_PASSWORD }}" >> .env
        echo "CONTENT_DB_HOST=${{ secrets.CONTENT_DB_HOST }}" >> .env
        echo "CONTENT_DB_NAME=${{ secrets.CONTENT_DB_NAME }}" >> .env
        echo "CONTENT_DB_NAME_TEST=${{ secrets.CONTENT_DB_NAME_TEST }}" >> .env
        echo "CONTENT_DB_USER=${{ secrets.CONTENT_DB_USER }}" >> .env
        echo "CONTENT_DB_PASSWORD=${{ secrets.CONTENT_DB_PASSWORD }}" >> .env
        echo "AI_DB_HOST=${{ secrets.AI_DB_HOST }}" >> .env
        echo "AI_DB_NAME=${{ secrets.AI_DB_NAME }}" >> .env
        echo "AI_DB_NAME_TEST=${{ secrets.AI_DB_NAME_TEST }}" >> .env
        echo "AI_DB_USER=${{ secrets.AI_DB_USER }}" >> .env
        echo "AI_DB_PASSWORD=${{ secrets.AI_DB_PASSWORD }}" >> .env
        echo "AI_API_KEY=${{ secrets.AI_API_KEY }}" >> .env
        echo "CODE_DB_HOST=${{ secrets.CODE_DB_HOST }}" >> .env
        echo "CODE_DB_NAME=${{ secrets.CODE_DB_NAME }}" >> .env
        echo "CODE_DB_NAME_TEST=${{ secrets.CODE_DB_NAME_TEST }}" >> .env
        echo "CODE_DB_USER=${{ secrets.CODE_DB_USER }}" >> .env
        echo "CODE_DB_PASSWORD=${{ secrets.CODE_DB_PASSWORD }}" >> .env
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
        echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
        echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env

    - name: Verify docker-compose
      run: docker compose version

    - name: Build microservices
      run: docker compose up --build -d

    - name: Wait microservices running
      run: |
        sleep 20
        docker ps

    - name: sandbox works
      run: curl http://localhost:8002/docs || echo "Error"

    - name: Prepare tests
      run: docker compose config --services

    - name: Show logs for testing
      run: |
        set -e
        SERVICES=(
          ai-assistance-service-test
          user-management-service-test
          sandbox-test 
          content-management-service-test
        )
        for SERVICE in "${SERVICES[@]}"; do
          echo "üîÅ Revisando logs y estado de $SERVICE"
          docker compose restart "$SERVICE" || true
          docker compose logs "$SERVICE" || true

          CONTAINER_ID=$(docker compose ps -q "$SERVICE")
          if [ -z "$CONTAINER_ID" ]; then
            echo "‚ö†Ô∏è  No container found for $SERVICE"
            continue
          fi

          EXIT_CODE=$(docker inspect "$CONTAINER_ID" --format='{{.State.ExitCode}}')
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "‚ùå Test failed in $SERVICE (exit code: $EXIT_CODE)"
            exit 1
          else
            echo "‚úÖ $SERVICE passed tests"
          fi
        done

    - name: Tear down
      run: docker compose down
    
    - name: Install dependencies for all services
      if: success()
      run: |
        echo "üì¶ Installing dependencies for all microservices..."
        
        if [ -d "user-management-service" ]; then
          echo "Installing User Management Service dependencies..."
          cd user-management-service && npm ci && cd ..
        fi
        
        if [ -d "content-management-service" ]; then
          echo "Installing Content Management Service dependencies..."
          cd content-management-service && npm ci && cd ..
        fi
        
        if [ -d "sandbox" ]; then
          echo "Installing Sandbox dependencies..."
          cd sandbox && npm ci && cd ..
        fi
        
        if [ -d "ai-assistance-service" ]; then
          echo "Installing AI Assistance Service dependencies..."
          cd ai-assistance-service && npm ci && cd ..
        fi

    - name: Run unit tests
      if: success()
      run: |
        echo "üß™ Running unit tests for all services..."
        
        # User Management Service Tests
        if [ -d "user-management-service" ] && [ -f "user-management-service/package.json" ]; then
          echo "Running User Management Service tests..."
          cd user-management-service
          npm test -- --passWithNoTests --coverage --watchAll=false || echo "‚ö†Ô∏è User Management tests completed with issues"
          cd ..
        fi
        
        # Content Management Service Tests
        if [ -d "content-management-service" ] && [ -f "content-management-service/package.json" ]; then
          echo "Running Content Management Service tests..."
          cd content-management-service
          npm test -- --passWithNoTests --coverage --watchAll=false || echo "‚ö†Ô∏è Content Management tests completed with issues"
          cd ..
        fi
        
        # Sandbox Tests
        if [ -d "sandbox" ] && [ -f "sandbox/package.json" ]; then
          echo "Running Sandbox tests..."
          cd sandbox
          npm test -- --passWithNoTests --coverage --watchAll=false || echo "‚ö†Ô∏è Sandbox tests completed with issues"
          cd ..
        fi
        
        # AI Assistance Service Tests
        if [ -d "ai-assistance-service" ] && [ -f "ai-assistance-service/package.json" ]; then
          echo "Running AI Assistance Service tests..."
          cd ai-assistance-service
          npm test -- --passWithNoTests --coverage --watchAll=false || echo "‚ö†Ô∏è AI Assistance tests completed with issues"
          cd ..
        fi
    
    - name: Run API endpoint tests
      if: success()
      run: |
        echo "üåê Running API endpoint tests..."
        
        # Test sandbox API endpoints
        echo "Testing Sandbox API..."
        curl -X POST http://localhost:8002/execute \
          -H "Content-Type: application/json" \
          -d '{"code": "print(\"Hello World\")", "language": "python"}' \
          || echo "‚ö†Ô∏è Sandbox execute endpoint test failed"
        
        # Add more API tests as needed
        echo "API endpoint tests completed"

    - name: Generate test report
      if: always()
      run: |
        echo "üìä Generating test report..."
        echo "=== TEST SUMMARY ===" > test-report.txt
        echo "Date: $(date)" >> test-report.txt
        echo "Commit: ${{ github.sha }}" >> test-report.txt
        echo "Branch: ${{ github.ref_name }}" >> test-report.txt
        echo "" >> test-report.txt
        
        # Container status
        echo "=== CONTAINER STATUS ===" >> test-report.txt
        docker compose ps >> test-report.txt || true
        echo "" >> test-report.txt
        
        # Service logs summary
        echo "=== SERVICE LOGS SUMMARY ===" >> test-report.txt
        docker compose logs --tail=10 >> test-report.txt || true
        
        cat test-report.txt

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: |
          test-report.txt
          **/coverage/
        retention-days: 7
    
  
#security scan job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-run
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run security audit
      run: |
        echo "üîí Running security audit for all services..."
        
        services=("user-management-service" "content-management-service" "sandbox" "ai-assistance-service")
        
        for service in "${services[@]}"; do
          if [ -d "$service" ] && [ -f "$service/package.json" ]; then
            echo "Auditing $service..."
            cd "$service"
            npm audit --audit-level=moderate || echo "‚ö†Ô∏è Security issues found in $service"
            cd ..
          fi
        done

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [build-and-run]
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v3

#    - name: Deploy to staging
#      run: |
#        echo "üöÄ Deploying to staging environment..."
#        echo "Deployment would happen here with your specific deployment strategy"
