"""Add test field for feedback

Revision ID: cae3b93e488e
Revises: d5ca9ee9760e
Create Date: 2025-06-01 01:03:52.177532

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'cae3b93e488e'
down_revision: Union[str, None] = 'd5ca9ee9760e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('code_tasks', sa.Column('date_limit', sa.DateTime(), nullable=True))
    op.add_column('code_tasks', sa.Column('grade', sa.Integer(), nullable=True))
    op.add_column('submissions', sa.Column('test_feedback', sa.JSON(), nullable=True))
    op.add_column('tasks', sa.Column('date_limit', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('grade', sa.Integer(), nullable=True))
    op.alter_column('tasks', 'created_at',
               existing_type=mysql.DATETIME(),
               type_=sa.TIMESTAMP(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tasks', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=mysql.DATETIME(),
               existing_nullable=True)
    op.drop_column('tasks', 'grade')
    op.drop_column('tasks', 'date_limit')
    op.drop_column('submissions', 'test_feedback')
    op.drop_column('code_tasks', 'grade')
    op.drop_column('code_tasks', 'date_limit')
    # ### end Alembic commands ###
